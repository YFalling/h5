var songContent = '[00:00.01]ここにいるよ / 我在这里\n [00:11.24]Baby boy 我就在这里</br>等候在此哪都不去\n [00:17.80]你知道我爱你</br>所以请不要担心\n [00:23.18]无论相隔有多遥远</br>这颗心都不会因此改变</br>你知道我想说的话吧?\n [00:31.06]我会一直等着你\n [00:44.00]不争气的我 在远处的你\n [00:47.00]想表达的心情还没有说出口</br>你就已经离去\n [00:51.63]现在留下的 也只有在影集中的你\n [00:55.13]只能在电波里相见的每一天</br>然而你的微笑 却再也无迹可寻\n [01:00.25]你的温度 你发丝的香气</br>如同困扰着我喉咙的那份干渴</br>却再也无法得到满足\n [01:06.01]在过去的每一天里</br>总会不由自主地探寻着你的面容\n [01:11.20]常常与你一同漫步的那条小路</br>现在只剩我的脚步声在那里回响\n [01:16.64]话说回来 你现在还好吗?</br>有好好的吃饭吗?\n [01:22.32]可恶 果然我还是说不出来\n [01:27.39]我的信 还是下次再寄吧\n [01:28.83]Baby boy 我就在这里</br>等候在此哪都不去\n [01:33.33]你知道我爱你</br>所以请不要担心\n [01:38.77]无论相隔有多遥远</br>这颗心都不会因此改变</br>你知道我想说的话吧?\n [01:46.77]我会一直等着你\n [01:59.77]在镰仓的沙滩上看着你的身影</br>想对你说的话却都被浪花淹没\n [02:05.78]却不知怎么感觉喘不过气来</br>明明是个男人</br>怎么就说不出来...\n [02:10.53]还记得么?</br>和你一起唱卡拉OK的时候\n [02:14.47]我所唱的歌曲的歌词 在屏幕上浮现</br>其实真的是我想对你说的\n [02:21.16]记得第一次和你单独见面的那一天\n [02:25.66]就像你我在街上偶遇一般</br>你忽然闪现的羞涩微笑 令我无法忘怀\n [02:31.91]我变得有点前言不搭后语</br>但你明白吗? 我想说的那些话\n [02:37.66]Shit 没有空白的地方可以写了\n [02:40.29]对不起啊 下次一定会寄给你\n [02:43.04]Baby boy 我就在这里</br>等候在此哪都不去\n [02:48.86]你知道我爱你</br>所以请不要担心\n [02:54.04]无论相隔有多遥远</br>这颗心都不会因此改变</br>你知道我想说的话吧?\n [03:02.05]我会一直等着你\n [03:15.05]我会一直等着你</br>能再找一份更好的工作\n [03:20.11]如果牺牲所有的一切就能做到的话</br>那我绝对要把你..(娶回来)\n [03:24.30]但是Please 你千万不要误会</br>我从没想过要让你觉得孤单\n [03:31.49]现在有点忙 不能多说了啊</br>baby请相信 这些都是为了我们的将来\n [03:36.99]But 说真的</br>我现在真的很想见到你</br>很想立刻将你拥入怀里\n [03:42.37]当初 你坐在我身旁的那个座位</br>现在已经没有任何人了...\n [03:48.19]唉 这些事情都算了</br>我想对你说的并不是那些\n [03:55.06]虽然为时已晚</br>把我一直想说的话都写进去吧</br>寄出这份 Unsent letter\n [03:58.50]Baby gril 我就在这里</br>等候在此哪都不去\n [04:04.38]你知道我爱你</br>所以请不要担心\n [04:09.57]无论相隔有多遥远</br>这颗心都不会因此改变</br>你知道我想说的话吧？\n [04:17.70]我会一直等着你\n [04:20.32]Baby boy 我就在这里 等候在此哪都不去\n [04:26.01]你知道我爱你</br>所以请不要担心\n [04:31.20]无论相隔有多遥远 这颗心都不会因此改变\n [04:36.70]现在终于可以坦率的说了吧\n [04:39.27]我从没想过要让你离开...\n'
var songContent1 = '' ;
function parseLyric(text) {
    //将文本分隔成一行一行，存入数组
    var lines = text.split('\n'),
        //用于匹配时间的正则表达式，匹配的结果类似[xx:xx.xx]
        pattern = /\[\d{2}:\d{2}.\d{2}\]/g,
        //保存最终结果的数组
        result = [];
    //去掉不含时间的行
    while (!pattern.test(lines[0])) {
        lines = lines.slice(1);
    };
    //上面用'\n'生成生成数组时，结果中最后一个为空元素，这里将去掉
    lines[lines.length - 1].length === 0 && lines.pop();
    lines.forEach(function(v /*数组元素值*/ , i /*元素索引*/ , a /*数组本身*/ ) {
        //提取出时间[xx:xx.xx]
        var time = v.match(pattern),
            //提取歌词
            value = v.replace(pattern, '');
        //因为一行里面可能有多个时间，所以time有可能是[xx:xx.xx][xx:xx.xx][xx:xx.xx]的形式，需要进一步分隔
        time.forEach(function(v1, i1, a1) {
            //去掉时间里的中括号得到xx:xx.xx
            var t = v1.slice(1, -1).split(':');
            //将结果压入最终数组
            result.push([parseInt(t[0], 10) * 60 + parseFloat(t[1]), value]);
        });
    });
    //最后将结果数组中的元素按时间大小排序，以便保存之后正常显示歌词
    result.sort(function(a, b) {
        return a[0] - b[0];
    });
    return result;
}

